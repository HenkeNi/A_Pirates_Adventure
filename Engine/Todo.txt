    sprite sheet class...
        rename Shader to ShaderProgram...


        use batch rendeirng in spriterenderer...

        check how to do batch, spritesheet,


            
            game scene has a scene manager
                * contains indoor scene, cave scene, etc...




Rendering;

BeginScene(Camrea* aCamera); 









### Path finding ### 
* Dijkstra for finding resources (just any resources)
* A-Star for finding player (for example)





engine config class? 
	* opengl version...




## Batch rendering ##

- if want to render more than 30 texture sloths => break up into more render calls  







Consider placing T infront of all tempalted classes
	TMemoryPool
	TFactory, etc...!!



Commands;
	
	Have a base folder for Component, Command, etc...? maybe GameObject?





namespaces?!
	put data structures in Hi_Engine::DataStructures??
		
	Hi_Engine::Algorithms??









Instance rendering;
	* draw same data in multiple different posiitons







< Memory Pool >

* how to return objects;
	- object have direct access to pool, and decides when they are no longer in used...
	- returned objects are smart pointers, tells memory pool when out of scope?
	- flags to mark if destroyed, object ppol checks each frame if set to true...
	- objects are subjects and memory pool observer..
















######################################### Camera #########################################

* How to handle Camera?

Options;

Opt 1. Every scene has a camera (put in Scene.h)
	+
	+

Opt 1.5 Camera could exist in Scene/Application/Engine and camera controllers exist as components (reference to the camera)

Opt 2. Application has a camera
	+ All scenes can share 
	+ Editor also gets access to a camera 
	- Application is just an interface
	- might be clumpsy to pass it along when need to be rendered??

Opt 2.5 Engine has a camera
	+ Both Editor and Scenes get a camera
	+ Can pass it in shared context

Opt 3. Just as a GameObject
	- Every scene requires a GameObject with a Camera (as well in Json)



Notes;
	* Would be nice to pass along a camera when rendering?? in render data? -> render different parts of the screen through different cameras...
								

##################################################################################


* Opt 1; 
	- Every scene contains a camera... (or maybe Application? -> pass it in shared context?)
	- Passed with RenderData to the renderer; SpriteRenderer::Render(someData, Camera);
	- C_CameraController component => have the ability to move or transform the camera...


* Opt 2;
	- Camera is always a component 
	- when camera is activated it sets itself as camera in the renderer 
	-	gameobject has pointer to its scene?? 


* Opt 3;
	- Camera lives in engine
	- C_Camera component controlls the camera (How? -> static member?)


* Opt 4;
	- Graphics.h contains a camera?


Scene always adds a camera game object`??





where to put camera?
	-> graphics?
	-> engine?
	-> just inherit from it when needed? (component)
	-> application (needed to render a scene?)
	-> renderer?

	bind camear to renderer??
	´pass in when rendering?=



	Scebe has a camera or at least a camera component? 


	C_CameraController?



### GAMEPLAY ###

-> Control with keys or by pressing mouse button (diablo style)? 



## Rendering ##
* use glCreate rather then glGen? => (glGenTexture vs glCreateTexture)?

render cómmand?



# Animations #
blend between textures? => mayebe bad idea?...



Commands??




GameObject can send a position set message to its components...
	only Transform listens...?? -> sets new position...


	particles in engine





	entity events?
		- spawned, despawned (destroyed), colliding_x, collind-Y,
		moving-left, became_idle, began-moving


Engine

* Memory Folder???
	* Allocater instead of memory pool!?




* Maybe put SceneManager and Scene.h in Engine?? Also consider putting GameObject and Component.h in Engine as well?? -> remains the same for all projects...




do all reading of json in Engine??



Have Contains functions return a struct 

template <typename T>
struct RESULT
{	
	bool m_contains;
	T* result;
}




* Utility
	- Perlin noise (1D)







In Game??
TimeManager?? Or extend CommonUtilities Timer.h???
	* RegisterCallback(float aTime, std::function<void()> aCallback)	->	 a callback that gets executed after x seconds/timespan
	* Notify															->  notify after timespan (returns a bool)



In Game: 
	DateManager() 






Make a Range class??



When to update delta time... 
	- at the end of the game loop??

	Fixed time steps?


	Run messag /event queue (?) at the end of the loop? 
		(at the end of the update loop -> so end of LateUpdate()?? )

		Event Queue -> all events get stored in a Queue (and sorted after priority) ??



Polling vs Pushing;

	-> attack? -> sword sends message? check if collides with anything...??





	Maybe put GameObject in Engine (as well as Component - base)
		and the rest inside the Game??



































		class Camera {
public:
    virtual ~Camera() {}

    virtual glm::mat4 getViewMatrix() const = 0;
    virtual glm::mat4 getProjectionMatrix() const = 0;
};

class PerspectiveCamera : public Camera {
public:
    PerspectiveCamera(const glm::vec3& position, const glm::vec3& target, float fov, float aspectRatio, float nearClip, float farClip)
        : mPosition(position), mTarget(target), mFov(fov), mAspectRatio(aspectRatio), mNearClip(nearClip), mFarClip(farClip)
    {}

    glm::mat4 getViewMatrix() const override {
        return glm::lookAt(mPosition, mTarget, glm::vec3(0.0f, 1.0f, 0.0f));
    }

    glm::mat4 getProjectionMatrix() const override {
        return glm::perspective(glm::radians(mFov), mAspectRatio, mNearClip, mFarClip);
    }

private:
    glm::vec3 mPosition;
    glm::vec3 mTarget;
    float mFov;
    float mAspectRatio;
    float mNearClip;
    float mFarClip;
};

class OrthographicCamera : public Camera {
public:
    OrthographicCamera(const glm::vec3& position, const glm::vec3& target, const glm::vec3& up, float left, float right, float bottom, float top, float nearClip, float farClip)
        : mPosition(position), mTarget(target), mUp(up), mLeft(left), mRight(right), mBottom(bottom), mTop(top), mNearClip(nearClip), mFarClip(farClip)
    {}

    glm::mat4 getViewMatrix() const override {
        return glm::lookAt(mPosition, mTarget, mUp);
    }

    glm::mat4 getProjectionMatrix() const override {
        return glm::ortho(mLeft, mRight, mBottom, mTop, mNearClip, mFarClip);
    }

private:
    glm::vec3 mPosition;
    glm::vec3 mTarget;
    glm::vec3 mUp;
    float mLeft;
    float mRight;
    float mBottom;
    float mTop;
    float mNearClip;
    float mFarClip;
};



























class Camera {
public:
    Camera() {}
    virtual ~Camera() {}

    void setProjectionMatrix(const glm::mat4& projectionMatrix) {
        m_projectionMatrix = projectionMatrix;
    }

    void setViewMatrix(const glm::mat4& viewMatrix) {
        m_viewMatrix = viewMatrix;
    }

    const glm::mat4& getProjectionMatrix() const {
        return m_projectionMatrix;
    }

    const glm::mat4& getViewMatrix() const {
        return m_viewMatrix;
    }

private:
    glm::mat4 m_projectionMatrix;
    glm::mat4 m_viewMatrix;
};





class OrthographicCamera : public Camera {
public:
    OrthographicCamera(float left, float right, float bottom, float top, float near, float far) {
        m_projectionMatrix = glm::ortho(left, right, bottom, top, near, far);
    }

    void setPosition(const glm::vec3& position) {
        m_viewMatrix = glm::translate(glm::mat4(1.0f), position);
    }
};









class PerspectiveCamera : public Camera {
public:
    PerspectiveCamera(float fov, float aspectRatio, float near, float far) {
        m_projectionMatrix = glm::perspective(fov, aspectRatio, near, far);
    }

    void setPosition(const glm::vec3& position) {
        m_viewMatrix = glm::translate(glm::mat4(1.0f), position);
    }

    void setRotation(const glm::vec3& rotation) {
        m_viewMatrix = glm::rotate(m_viewMatrix, rotation.x, glm::vec3(1.0f, 0.0f, 0.0f));
        m_viewMatrix = glm::rotate(m_viewMatrix, rotation.y, glm::vec3(0.0f, 1.0f, 0.0f));
        m_viewMatrix = glm::rotate(m_viewMatrix, rotation.z, glm::vec3(0.0f, 0.0f, 1.0f));
    }
};
