Engine

* Maybe put SceneManager and Scene.h in Engine?? Also consider putting GameObject and Component.h in Engine as well?? -> remains the same for all projects...




do all reading of json in Engine??



Have Contains functions return a struct 

template <typename T>
struct RESULT
{	
	bool m_contains;
	T* result;
}




* Utility
	- Perlin noise (1D)







In Game??
TimeManager?? Or extend CommonUtilities Timer.h???
	* RegisterCallback(float aTime, std::function<void()> aCallback)	->	 a callback that gets executed after x seconds/timespan
	* Notify															->  notify after timespan (returns a bool)



In Game: 
	DateManager() 






Make a Range class??



When to update delta time... 
	- at the end of the game loop??

	Fixed time steps?


	Run messag /event queue (?) at the end of the loop? 
		(at the end of the update loop -> so end of LateUpdate()?? )

		Event Queue -> all events get stored in a Queue (and sorted after priority) ??



Polling vs Pushing;

	-> attack? -> sword sends message? check if collides with anything...??





	Maybe put GameObject in Engine (as well as Component - base)
		and the rest inside the Game??