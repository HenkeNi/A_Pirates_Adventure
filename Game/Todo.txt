Scene Loading (how to load in objects)
* pass path to object manager?? (takes in a string returns array of objects)??
* Init function in Scene? => put in base class?







Components have a prio (for sorting in component managern??)






In Component constructor (if compoent is templated )

template <typename Derived>
class Component 

 	// ObjectManager::RegisterBuilder(type_idenx<derived>, new ConcreteComponentBuilder<Derived>()); -> posible way of registering components 










Rather than builders;
	- component factory do have an array of compoents =>called prototypes..?!


	or maybe have generuc factory byt instead of builder they uses prototypes?!







Scenes has a GameObjectManager?! 
	- rather than just vector of gameobjects?

	GameObjectManager contains a GameObjectFactory and a ComponentFactory?? static? s_gameObjectFactory	

	responsible for adding builders! RegisterComponentBuilder...



Generic factory?

generic blueprint?




Graphics components register themselves to the graphics engiene??




Components;

	- Character
		- NPC/Enemy
		- Combat
		- Stats
		- Needs
		- 






FloatStat
{

}



MutableFloat
{
}





Buttin Comp
	-> command on click?!



ComponentManager??

	ComponentManager<C_Transform>	m_transforms;
	ComponentManager<C_Sprite>		m_sprites;
	ComponentManager<C_Physics>		m_physics;
	ComponentManager<C_Transform> m_transforms;






Components;
	* C_PlayerController
	
	* Agent? (or EnemyController?) AI Controller? (is hostile?)
		- contains a state machine? (Or goal action oriented planing?)

	* Collider component
		* Box collider
		* Circle collider
		* Composite collider

	* Health component? -> Or Stat component??



	* Interactable (button/interact with doors, etc??)
		
	
	* Physics component?? needed?? -> no gravity...
		Contains Velocity??

	* Velocity or Movement component?


	* Sprite
	* SpriteController? Or AnimatedSprite? Anímation? AnimationController?


	* Text


	_inventory /equipment


	* MeleeWeapon? 
		-> offset (vec2 or vec3)
		-> attackCooldown, elapsedTime
		-> attack duration? m_elapsedDuration? or use elapsedtime?
		-> damage min , max
		-> range
		-> level??

	* Ranged weapon?
		* Shoot 
			* reload..




Folder structure;

* Game	
* Precompiled
* Data?



	* Projectile ocmponent???



	* Euipment comp?
		-> ItemContainer = unorederd map eEquipmentSlot, GameObject..


	* Effect component??


	Camera component?




	loading scene/gameobjects from json
	""time request notification"




GameObjectManager?? in Scene?? or hhave layers??




Scene have a component list (refers to blueprints...)

	"blueprint_id": "playButton"










Factory...
	- no need to specify components???!!
		* defaeats the purpose??






	Soberness is replacing sanity => if to sober => start seeing stuff








Put GameObject/GameObjectParser/GameObjectFactory ..... Scene/SceneManager? in engine??
	* Base/GameObject
	* Base/Scene






BulletSpawner class (not a component??)
	
	void SpawnBullet(vec2 aSpawnLocation)






SCeneFactory?? or SceneLoader/SceneParser




In each Scene => GameObjectManager
	* Listenes for ObjectDestryoedd message => (pass itself in) ... manager finds object in list and removes it...







Components;

* SpriteRenderer OR C_Sprite??


















SceneLoader...

SceneFactory...






OnEnter()
- Parse Scene/LoadScene("path", &m_gameObjects);


auto* gameObject = GameFactory::GetInstance().Create(type);
gameObject.AddComponent??

m_gameObject.push_back(gameObject);















## SceneBuilder ##
* consider using Factory to create scenes?!
- can't be unique...
- 



FILE; SceneBuilder.hpp (also include a static factory in SceneManager!)

class Scene;

class SceneBuilder
{
public:
	virtual ~SceneBuilder() = default;
	virtual Scene* Build() const = 0;
};


template <typename T>
class ConcreteSceneBuilder : public SceneBuilder
{
public:
	Scene* Build() const override
	{
		return new T{};
	}
};