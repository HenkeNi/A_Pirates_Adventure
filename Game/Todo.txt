Systems
- QuestSystem
- DialogueSystem
- Leveling/ProgressionSystem




Update scene to not future Update, LateUpdate and Render?
	- sends message when transitioning to a new scene? pass in bool if should clear entities?




## MapSystem ##
- consider integrate the map into the component system?
	* Either map or MapChunks could be components?




## GameWorld ##
- consider adding a GameWorld class.
	* Would be placed in Game as a member (the SceneManager would also be a member of Game)
	* GameWorld would contain the EntityManager, and the SystemManager
	* GameWorld would contain Update, LateUpdate and render functions	
	* Scenes would no longer contain Update/Draw functions (unless necessary)
		* Instead scenes would send event when transitioning to a new scene? 
		* Scene would just handle data/logic for transitioning to a new scene, etc...
	* Either Game or GameWorld have a pointer to the active scene



## StateMachine ##
	Scene(s) could have a StateMachine to represent states in the game, 












Load blueprints for specific Scene OnEnter()??









Populate level();







Todo;
	* figure out how to pass sprites to sprite renderer
		- use object manager to get all sprites with certain type (from each layer - in order)...

		remove draw part from component?? 
				- get sprite components in scene (draw function ) => and pass them to sprite renderer...


		or Sprite component sends out an event => draw event...

















		consider putting SceneManager and scenes in engine...
		and gameobject/component base classes...



* Draw only part of a texture => 
	- glBufferSubData(), glMapBuffer() or glMapBufferRange()





	draw tiles at the bottom first (closest to the player)





Material => shader + texture??





Day/night cycle
* two different textuers?? blend => (one is day texture, and one is night texture.) YES!!




Camera:
	* player has a camera controller???

	camera in each scene??


	Gameobject has a pointer to the scene??





should world be x and z (laying flat) or x and y (standing up/on its edge)



## Code check-ups ##
	
* make sure to always delete a pointer before setting it...




Put assets folder in game??





Sprite sheet vs texture atlas
* texture atlas => contains building blocks for creating the world (grass tiles, etc..) 
* sprite sheet => animations (frames...)






Render tile from tilesheet => set texture coordinates... 
	instead of pasing in a coordinate between 0 -> 1, convert the tile on the spirte sheet to a coordinate between 0 and 1,,



	SpriteSheet class?? 





Input/Commands;
	-> maybe components (with commands) register themselves in input manager??
	-> or make input handler return a command 



	Command is an input observer?? -> derived overrides tthe handle function?!






-> swap scene command???










* Fix camera following player
* Controlls/input..


* Map (tiled)
* billboards..











TODO; have playercontroller respond to key press...



1. Create a player
	- consider using observer pattern for input (not dispather system??)



1. Load in scene objects...




2. Check if Factories work as intended! doesn't use the copy function in components?!
	- nvm uses the copy when creating gameobjects...	make sure it uses memory pool when using the build function!



Classes;
* MapGenerator







Be able to subscribe to another objects messages??
	- camera to an another gameobjets change of position...	
			possubly by adding your own component(s) to the others   



Command Factory?? for buttons... etc...









Scene Loading (how to load in objects)
* pass path to object manager?? (takes in a string returns array of objects)??
* Init function in Scene? => put in base class?







Components have a prio (for sorting in component managern??)






In Component constructor (if compoent is templated )

template <typename Derived>
class Component 

 	// ObjectManager::RegisterBuilder(type_idenx<derived>, new ConcreteComponentBuilder<Derived>()); -> posible way of registering components 










Rather than builders;
	- component factory do have an array of compoents =>called prototypes..?!


	or maybe have generuc factory byt instead of builder they uses prototypes?!







Scenes has a GameObjectManager?! 
	- rather than just vector of gameobjects?

	GameObjectManager contains a GameObjectFactory and a ComponentFactory?? static? s_gameObjectFactory	

	responsible for adding builders! RegisterComponentBuilder...



Generic factory?

generic blueprint?




Graphics components register themselves to the graphics engiene??




Components;

	- Character
		- NPC/Enemy
		- Combat
		- Stats
		- Needs
		- 






FloatStat
{

}



MutableFloat
{
}





Buttin Comp
	-> command on click?!



ComponentManager??

	ComponentManager<C_Transform>	m_transforms;
	ComponentManager<C_Sprite>		m_sprites;
	ComponentManager<C_Physics>		m_physics;
	ComponentManager<C_Transform> m_transforms;






Components;
	* C_PlayerController
	
	* Agent? (or EnemyController?) AI Controller? (is hostile?)
		- contains a state machine? (Or goal action oriented planing?)

	* Collider component
		* Box collider
		* Circle collider
		* Composite collider

	* Health component? -> Or Stat component??



	* Interactable (button/interact with doors, etc??)
		
	
	* Physics component?? needed?? -> no gravity...
		Contains Velocity??

	* Velocity or Movement component?


	* Sprite
	* SpriteController? Or AnimatedSprite? Anímation? AnimationController?


	* Text


	_inventory /equipment


	* MeleeWeapon? 
		-> offset (vec2 or vec3)
		-> attackCooldown, elapsedTime
		-> attack duration? m_elapsedDuration? or use elapsedtime?
		-> damage min , max
		-> range
		-> level??

	* Ranged weapon?
		* Shoot 
			* reload..




Folder structure;

* Game	
* Precompiled
* Data?



	* Projectile ocmponent???



	* Euipment comp?
		-> ItemContainer = unorederd map eEquipmentSlot, GameObject..


	* Effect component??


	Camera component?




	loading scene/gameobjects from json
	""time request notification"




GameObjectManager?? in Scene?? or hhave layers??




Scene have a component list (refers to blueprints...)

	"blueprint_id": "playButton"










Factory...
	- no need to specify components???!!
		* defaeats the purpose??






	Soberness is replacing sanity => if to sober => start seeing stuff








Put GameObject/GameObjectParser/GameObjectFactory ..... Scene/SceneManager? in engine??
	* Base/GameObject
	* Base/Scene






BulletSpawner class (not a component??)
	
	void SpawnBullet(vec2 aSpawnLocation)






SCeneFactory?? or SceneLoader/SceneParser




In each Scene => GameObjectManager
	* Listenes for ObjectDestryoedd message => (pass itself in) ... manager finds object in list and removes it...







Components;

* SpriteRenderer OR C_Sprite??


















SceneLoader...

SceneFactory...






OnEnter()
- Parse Scene/LoadScene("path", &m_gameObjects);


auto* gameObject = GameFactory::GetInstance().Create(type);
gameObject.AddComponent??

m_gameObject.push_back(gameObject);















## SceneBuilder ##
* consider using Factory to create scenes?!
- can't be unique...
- 



FILE; SceneBuilder.hpp (also include a static factory in SceneManager!)

class Scene;

class SceneBuilder
{
public:
	virtual ~SceneBuilder() = default;
	virtual Scene* Build() const = 0;
};


template <typename T>
class ConcreteSceneBuilder : public SceneBuilder
{
public:
	Scene* Build() const override
	{
		return new T{};
	}
};








### Camera ###
- as a component
- in scene manager (shared by all scenes...)
- in scene
